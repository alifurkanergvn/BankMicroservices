spring:
  application:
    name: "eurekaserver"  # Attancion: This name should match in the bank-config-server eurekaserver.yml
  config:
    import: "optional:configserver:http://localhost:8071/"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true   # Enables the readiness state indicator, which shows if the application is ready to serve requests. http://localhost:8071/actuator/health/readiness
    liveness-state:
      enabled: true   # Enables the liveness state indicator, which shows if the application is alive and functioning properly. http://localhost:8071/actuator/health/liveness
  endpoint:
    health:
      probes:
        enabled: true   # Enables health probes, allowing external systems (e.g., Kubernetes) to check the application's health status. http://localhost:8071/actuator/health/

# we added new eurekaserver.yml on bank-config-server project to use eureka client http://localhost:8071/eurekaserver/default
#Build and run the Eureka Server: Build your EurekaserverApplication project  and run it as a Spring Boot application. Open a web browser and navigate to
#http://localhost:8070. You should see the Eureka Server dashboard, which displays information about registered service instances.
