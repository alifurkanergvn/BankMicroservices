services:
  configserver:
    # The "configserver" service represents the Config Server microservice.
    image: "alifurkan159/accounts:s6"  # Specifies the Docker image and its version (s6) for the Config Server.
    container_name: "configserver-ms"  # Assigns a custom name to the container for better identification.
    ports:
      - "8071:8071"  # Maps port 8071 on the host to port 8071 in the container (external to internal).
    deploy:
      resources:
        limits:
          memory: 700m  # Restricts the maximum memory usage for this service to 700 MB.
    networks:
      - mybank  # Connects this service to the "mybank" network for internal communication.

  accounts:
    # The "accounts" service represents the Accounts microservice.
    image: "alifurkan159/accounts:s6"  # Specifies the Docker image and its version (s6).
    container_name: "accounts-ms"  # Assigns a custom name to the container for better identification.
    ports:
      - "8080:8080"  # Maps port 8080 on the host to port 8080 in the container (external to internal).
    deploy:
      resources:
        limits:
          memory: 700m  # Restricts the maximum memory usage for this service to 700 MB.
    networks:
      - mybank  # Connects this service to the "mybank" network for internal communication.
    environment:
        SPRING_APPLICATION_NAME: accounts  # Sets the application name for this service to "accounts". Enter same name as in application.yml
        SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"  # Specifies the Config Server URL for this service to fetch its configuration. We added environment variable like in application.yml
        SPRING_PROFILES_ACTIVE: default  # Sets the active profile for this service to "default" because of folder path.

  loans:
    # The "loans" service represents the Loans microservice.
    image: "alifurkan159/loans:s6"  # Specifies the Docker image and its version (s6).
    container_name: "loans-ms"  # Assigns a custom name to the container for better identification.
    ports:
      - "8090:8090"  # Maps port 8090 on the host to port 8090 in the container (external to internal).
    deploy:
      resources:
        limits:
          memory: 700m  # Restricts the maximum memory usage for this service to 700 MB.
    networks:
      - mybank  # Connects this service to the "mybank" network for internal communication.
    environment:
      SPRING_APPLICATION_NAME: loans  # Sets the application name for this service to "loans". Enter same name as in application.yml
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8090/"  # Specifies the Config Server URL for this service to fetch its configuration. We added environment variable like in application.yml
      SPRING_PROFILES_ACTIVE: default  # Sets the active profile for this service to "default" because of folder path.

  cards:
    # The "cards" service represents the Cards microservice.
    image: "alifurkan159/cards:s6"  # Specifies the Docker image and its version (s6).
    container_name: "cards-ms"  # Assigns a custom name to the container for better identification.
    ports:
      - "9000:9000"  # Maps port 9000 on the host to port 9000 in the container (external to internal).
    deploy:
      resources:
        limits:
          memory: 700m  # Restricts the maximum memory usage for this service to 700 MB.
    networks:
      - mybank  # Connects this service to the "mybank" network for internal communication.
    environment:
      SPRING_APPLICATION_NAME: cards  # Sets the application name for this service to "cards". Enter same name as in application.yml
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:9000/"  # Specifies the Config Server URL for this service to fetch its configuration. We added environment variable like in application.yml
      SPRING_PROFILES_ACTIVE: default  # Sets the active profile for this service to "default" because of folder path.

networks:
  mybank:
    # Defines a custom bridge network named "mybank".
    driver: "bridge"  # Uses the "bridge" driver to allow communication between services.

#  Go to the this docker-compose path and open the terminal and type below command:
#     docker compose up -d
# Starts all the services defined in the Compose file in the background (-d=detached flag).
# It reads the configuration from the Compose file and creates the necessary containers with the specified settings.
# If you dont have images in local it will download on dockerHub and run it. Because we pushed before all images

#  Go to the this docker-compose path and open the terminal and type below command:
#     docker compose down
# Stops and removes all containers, networks, and volumes created by the Compose file.

#     docker compose start
# Starts the services that are stopped or not running
# If you use that after down command you cant start again because you removed all containers

#     docker compose stop
# Stops the running containers
