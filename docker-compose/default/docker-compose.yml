services:
  rabbit:
    image: rabbitmq:3.12-management
    hostname: rabbitmq
    ports:
      - "5672:5672"    # Maps RabbitMQ's default AMQP port (5672) from the container to the host. This port is used for messaging between applications and RabbitMQ using the AMQP protocol.
      - "15672:15672"  # Maps RabbitMQ's management UI port (15672) from the container to the host. This port provides access to the web-based management console for monitoring and managing RabbitMQ.
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s      # The time interval between each health check attempt.
      timeout: 5s        # The maximum time to wait for a health check response before considering it a failure.
      retries: 10        # The number of consecutive failures allowed before marking the service as unhealthy.
      start_period: 5s   # The initial delay before starting health checks after the container starts.
    extends:
      file: common-config.yml
      service: network-deploy-service

  accountsdb:
    container_name: accountsdb  # Assigns a custom name to the container for better identification.
    ports:
      - 3306:3306  # Maps port 3306 on the host to port 3306 in the container (external to internal).
    environment:
      MYSQL_DATABASE: accountsdb  # Creates a database named "accountsdb" upon container startup.
    extends:
      file: common-config.yml
      service: microservice-db-config

  loansdb:
    container_name: loanssdb  # Assigns a custom name to the container for better identification.
    ports:
      - 3307:3306  # Maps port 3307 on the host to port 3306 in the container (external to internal).
    environment:
      MYSQL_DATABASE: loanssdb  # Creates a database named "loanssdb" upon container startup.
    extends:
      file: common-config.yml
      service: microservice-db-config

  cardsdb:
    container_name: cardsdb  # Assigns a custom name to the container for better identification.
    ports:
      - 3308:3306  # Maps port 3307 on the host to port 3306 in the container (external to internal).
    environment:
      MYSQL_DATABASE: cardsdb  # Creates a database named "cardsdb" upon container startup.
    extends:
      file: common-config.yml
      service: microservice-db-config

  configserver:
    image: "alifurkan159/configserver:s6"  # Specifies the Docker image and its version (s6) for the Config Server.
    container_name: configserver-ms  # Assigns a custom name to the container for better identification.
    ports:
      - "8071:8071"  # Maps port 8071 on the host to port 8071 in the container (external to internal).
    depends_on:
      rabbit:
        condition: service_healthy   # Ensures that the "rabbit" service is healthy before starting this service.
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"  # This health check ensures that the Config Server is operational by sending a request to its readiness endpoint. If the response contains "UP", the service is considered healthy; otherwise, it exits with an error.
      interval: 10s       # The time interval between each health check attempt.
      timeout: 5s         # The maximum time to wait for a health check response before considering it a failure.
      retries: 10         # The number of consecutive failures allowed before marking the service as unhealthy.
      start_period: 10s   # The initial delay before starting health checks after the container starts.
    extends:
      file: common-config.yml
      service: microservice-base-config

  accounts:
    image: "alifurkan159/accounts:s6"  # Specifies the Docker image and its version (s6).
    container_name: accounts-ms  # Assigns a custom name to the container for better identification.
    ports:
      - "8080:8080"  # Maps port 8080 on the host to port 8080 in the container (external to internal).
    depends_on:
      accountsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy    # Ensures that the "configserver" service is healthy before starting this service.
    environment:
        SPRING_APPLICATION_NAME: "accounts"     # Sets the application name for this service to "accounts". Enter same name as in application.yml
        SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accountsdb"     # Sets the database URL for the application to connect to the "accountsdb" MySQL database.
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  loans:
    image: "alifurkan159/loans:s6"  # Specifies the Docker image and its version (s6).
    container_name: loans-ms  # Assigns a custom name to the container for better identification.
    ports:
      - "8090:8090"  # Maps port 8090 on the host to port 8090 in the container (external to internal).
    depends_on:
      loansdb:
        condition: service_healthy
      configserver:
        condition: service_healthy    # Ensures that the "configserver" service is healthy before starting this service.
    environment:
      SPRING_APPLICATION_NAME: "loans"    # Sets the application name for this service to "loans". Enter same name as in application.yml
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3306/loansdb"   # Sets the database URL for the application to connect to the "loansdb" MySQL database.
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  cards:
    image: "alifurkan159/cards:s6"  # Specifies the Docker image and its version (s6).
    container_name: "cards-ms"  # Assigns a custom name to the container for better identification.
    ports:
      - "9000:9000"  # Maps port 9000 on the host to port 9000 in the container (external to internal).
    depends_on:
      cardsdb:
        condition: service_healthy
      configserver:
        condition: service_healthy    # Ensures that the "configserver" service is healthy before starting this service.
    environment:
      SPRING_APPLICATION_NAME: "cards"   # Sets the application name for this service to "cards". Enter same name as in application.yml
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cardsdb"
    extends:
      file: common-config.yml
      service: microservice-configserver-config

networks:
  mybank:
    driver: "bridge"  # Uses the "bridge" driver to allow communication between services.

#  Go to the this docker-compose path and open the terminal and type below command:
#     docker compose up -d
# Starts all the services defined in the Compose file in the background (-d=detached flag).
# It reads the configuration from the Compose file and creates the necessary containers with the specified settings.
# If you dont have images in local it will download on dockerHub and run it. Because we pushed before all images

#  Go to the this docker-compose path and open the terminal and type below command:
#     docker compose down
# Stops and removes all containers, networks, and volumes created by the Compose file.

#     docker compose start
# Starts the services that are stopped or not running
# If you use that after down command you cant start again because you removed all containers

#     docker compose stop
# Stops the running containers

#     docker run -p 3306:3306 --name accountsdb -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=accountsdb -d mysql
#This comment is used to run a MySQL container with the following options User and Password is:root
#And we download SqlEctron for visual.

#     docker run -p 3307:3306 --name loansdb -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=loansdb -d mysql

#     docker run -p 3308:3306 --name cardsdb -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=cardsdb -d mysql
